/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UDPgui;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Chase Cook
 * @author Trent Ford
 * @author Blake Moman
 * 
 * CS 450 Networking Project #1
 */
public class UDPgui extends javax.swing.JFrame {

    /**
     * Creates new form java
     */
    public UDPgui() {
        initComponents();
    }
    public void generateIP(String s){
        String[] temp = s.split("\\.");
        byte[] address = new byte[4];
        try{
        address[0] = (byte)Integer.parseInt(temp[0]);
        address[1] = (byte)Integer.parseInt(temp[1]);
        address[2] = (byte)Integer.parseInt(temp[2]);
        address[3] = (byte)Integer.parseInt(temp[3]);
        
        ip = InetAddress.getByAddress(address);
        }
        catch(ArrayIndexOutOfBoundsException | UnknownHostException e){
            JOptionPane.showMessageDialog(null, "The target IP address you entered is invalid, please enter a valid one", "Invalid Input", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        options = new javax.swing.ButtonGroup();
        simulateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sharedTextArea = new javax.swing.JTextArea();
        sharedLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        iPTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        serverRadioButton = new javax.swing.JRadioButton();
        clientRadioButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        sharedRulesLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        rulesTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        simulateButton.setText("Simulate");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("UDP Simulator");

        sharedTextArea.setEditable(false);
        sharedTextArea.setColumns(20);
        sharedTextArea.setRows(5);
        jScrollPane1.setViewportView(sharedTextArea);

        sharedLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sharedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sharedLabel.setText("Server");

        jLabel2.setText("Target IP Address:");

        iPTextField.setEditable(false);

        jLabel4.setText("Example: 123.456.7.89");

        options.add(serverRadioButton);
        serverRadioButton.setSelected(true);
        serverRadioButton.setText("Server");
        serverRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverRadioButtonActionPerformed(evt);
            }
        });

        options.add(clientRadioButton);
        clientRadioButton.setText("Client");
        clientRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientRadioButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome to the UDP Simulator! To get started you will need a few things:\n1. This program installed on the two computers you wish to run it on\n2. The ip address of these two computers.\n3. To decide which one will be the Server and the other the Client\n");
        jScrollPane2.setViewportView(jTextArea1);

        sharedRulesLabel.setText("Server Guide:");

        rulesTextArea.setEditable(false);
        rulesTextArea.setBackground(new java.awt.Color(240, 240, 240));
        rulesTextArea.setColumns(20);
        rulesTextArea.setRows(5);
        rulesTextArea.setText("1. Press the Simulate button to get started.\n\n2. Once you do, start the Client Simulations\n on the other computer\n\n3. Once you press Simulate, it will disable\n the button.\n\n4. In order to change your selction of Server, you\n will have to close and relaunch the program");
        rulesTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(rulesTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(147, 147, 147)
                                .addComponent(sharedRulesLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clientRadioButton)
                            .addComponent(serverRadioButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(iPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(simulateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(125, 125, 125))
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sharedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(simulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(6, 6, 6)
                                .addComponent(serverRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clientRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(57, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(sharedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sharedRulesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
        random = new Random();
        
        if(serverRadioButton.isSelected()){
            Thread server = new UDServer();
            server.start();
            simulateButton.setEnabled(false);
        }
        else if(clientRadioButton.isSelected()){
            Thread client = new UDClient();
            generateIP(iPTextField.getText());
            client.start();
            simulateButton.setEnabled(false);  
            iPTextField.setEditable(false);
           
        }
       
    }//GEN-LAST:event_simulateButtonActionPerformed

    private void serverRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverRadioButtonActionPerformed
        // TODO add your handling code here:
        sharedLabel.setText("Server");
        iPTextField.setEditable(false);
        sharedRulesLabel.setText("Server Guide: ");
        rulesTextArea.setText("1. Press the Simulate button to get started.\n\n"
                + "2. Once you do, start the Client Simulations\n on the other computer\n\n"
                + "3. Once you press Simulate, it will disable\n the button.\n\n"
                + "4. In order to change your selction of Server, you\n will have to close and relaunch the program");
    }//GEN-LAST:event_serverRadioButtonActionPerformed

    private void clientRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientRadioButtonActionPerformed
        // TODO add your handling code here:
        sharedLabel.setText("Client");
        iPTextField.setEditable(true);
        sharedRulesLabel.setText("Client Guide: ");
        rulesTextArea.setText("1. Enter the IP address in the correct format of\n the computer you are running Server on.\n\n"
                + "2. Once entered, press Simulate to send 10\n packets to the Server\n\n"
                + "3. To send more packets or to change your choice,\n you will have to close and relaunch the program");
    }//GEN-LAST:event_clientRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UDPgui().setVisible(true);
        });
    }

    private DatagramSocket socket;
    private final byte[] buffer = new byte[256];
    private Random random;
    long startTime;
    long stopTime;
    long waitTime;
    long totalDuration;
    long[] pings;
    int clientSent = 1;
    public boolean received;
    public static InetAddress ip;

    class UDServer extends Thread{
        @Override
        public void run(){

            try{
                
                    
                // Create a datagram socket, bound to the specific port 2000
                DatagramSocket socket = new DatagramSocket(2000);

                sharedTextArea.append("Bound to local port " + socket.getLocalPort() + "\n");
                while(true){ 
                    // Create a datagram packet, containing a maximum buffer of 256 byte 
                    DatagramPacket packet = new DatagramPacket( new byte[256], 256 );

                    // Receive a packet - remember by default this is a blocking operation

                    socket.receive(packet);
                    if(random.nextInt(3) != 1){
                        received = true;
                        sharedTextArea.append("Packet received at " + new Date( ) + "\n");
                        // Display packet information
                        InetAddress remote_addr = packet.getAddress();
                        sharedTextArea.append("Sender: " + remote_addr.getHostAddress( ) +"\n");
                        sharedTextArea.append("from Port: " + packet.getPort() + "\n");

                        // Display packet contents, by reading from byte array
                        ByteArrayInputStream bin = new ByteArrayInputStream(packet.getData());

                        // Display only up to the length of the original UDP packet
                        for (int i=0; i < packet.getLength(); i++)  {
                                int data = bin.read();
                                if (data == -1) break;

                                else sharedTextArea.append( (char) data + "");

                        }
                        sharedTextArea.append("\n");
                        try{

                            Thread.sleep(random.nextInt(201));
                        }
                        catch(InterruptedException e){}
                        socket.send(packet);
                    }
                    else{
                        sharedTextArea.append("Number of Lost packets: " + clientSent
                                + ".\n");
                        clientSent++;
                    }
                    sharedTextArea.append("\n");
                }
            }   
            catch (IOException e) 	{
                sharedTextArea.append("Error - " + e + "\n\n");
                    
            }
            
        }
    }
    class UDClient extends Thread{
 
        @Override
        public void run(){
        String hostname="localhost";    String message = "HELLO USING UDP!";
        while(clientSent < 11){
            startTime = System.currentTimeMillis();
            try {
		// Create a datagram socket, look for the first available port
		DatagramSocket socket = new DatagramSocket();

		sharedTextArea.append("Using local port: " + socket.getLocalPort()+"\n");
                ByteArrayOutputStream bOut = new ByteArrayOutputStream();
                PrintStream pOut = new PrintStream(bOut);
                pOut.print(message);
                //convert printstream to byte array
                InetAddress remote_addr = InetAddress.getByName(hostname);
                if(ip != null){
                    remote_addr = ip;
                }
                byte [ ] bArray = bOut.toByteArray();
		// Create a datagram packet, containing a maximum buffer of 256 bytes
		DatagramPacket packet=new DatagramPacket( bArray, bArray.length );

                sharedTextArea.append("Looking for hostname " + hostname+"\n");
                //get the InetAddress object
                //check its IP number
                sharedTextArea.append("Hostname has IP address = " + remote_addr.getHostAddress() + "\n");
                //configure the DataGramPacket
                packet.setAddress(remote_addr);
                packet.setPort(2000);
                //send the packet
                Random random = new Random();
                socket.send(packet);
		sharedTextArea.append("Packet sent at! " + new Date() + "\n");
		// Display packet information
		sharedTextArea.append("Sent by  : " + remote_addr.getHostAddress() +"\n");
        	sharedTextArea.append("Send from: " + packet.getPort() +"\n");
                packetStatus status = new packetStatus(socket, packet);
                status.start();
                long elapsedTime=0;
                while((elapsedTime < 300) && !received){
                    waitTime = System.currentTimeMillis();
                    elapsedTime = waitTime - startTime;
                
                }
                status.interrupt();
                System.out.println("test2");
                if(received){
                    stopTime = System.currentTimeMillis();
                    totalDuration = stopTime - startTime;
                    sharedTextArea.append("Host acknowledged packet " + clientSent + " after " +
                            totalDuration + " ms\n\n");
                    received = false;
                    clientSent++;
                    
                }
                else {sharedTextArea.append("Packet was"
                        + " not acknowleged by the host!\n\n");
                        received = false;
                        clientSent++;
                }
             
		}
                catch (UnknownHostException ue){
                        sharedTextArea.append("Unknown host "+hostname + "\n\n");
                }
		catch (IOException e){
			sharedTextArea.append("Error - " + e + "\n\n");
		}
            }
        }
    }
      class packetStatus extends Thread{
        public DatagramSocket s;
        public DatagramPacket p;
        public packetStatus(DatagramSocket socket, DatagramPacket packet) throws IOException{
            s = socket;
            p = packet;
        }
        @Override
        public void run(){
            try{
                s.receive(p);
                System.out.println("test");
                received = true;
            }
            catch(IOException e){}
        }
    }
    /**
     * @param args the command line arguments
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton clientRadioButton;
    private javax.swing.JTextField iPTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.ButtonGroup options;
    private javax.swing.JTextArea rulesTextArea;
    private javax.swing.JRadioButton serverRadioButton;
    private javax.swing.JLabel sharedLabel;
    private javax.swing.JLabel sharedRulesLabel;
    private javax.swing.JTextArea sharedTextArea;
    private javax.swing.JButton simulateButton;
    // End of variables declaration//GEN-END:variables
}
