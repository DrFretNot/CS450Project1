/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UDPgui;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Random;

/**
 *
 * @author trent ford
 * @author chase cook
 * @author blake moman
 * 
 * CS 450 Networking Project #1
 */
public class UDPgui extends javax.swing.JFrame {

    /**
     * Creates new form java
     */
    public UDPgui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SimulateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        instructionsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ClientTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ServerTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SimulateButton.setText("Simulate");
        SimulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimulateButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("UDP Program");

        instructionsLabel.setText("Simulate Packet switching across a network! Just press the button.");

        ClientTextArea.setEditable(false);
        ClientTextArea.setColumns(20);
        ClientTextArea.setRows(5);
        jScrollPane1.setViewportView(ClientTextArea);

        ServerTextArea.setEditable(false);
        ServerTextArea.setColumns(20);
        ServerTextArea.setRows(5);
        jScrollPane2.setViewportView(ServerTextArea);

        jLabel3.setText("Client");

        jLabel4.setText("Server");

        portLabel.setText("Port");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(instructionsLabel)
                                    .addComponent(portLabel))
                                .addGap(28, 28, 28)
                                .addComponent(SimulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instructionsLabel)
                    .addComponent(SimulateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(portLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimulateButtonActionPerformed
        random = new Random();
        Thread thread_2 = new UDClient();
        Thread thread_1 = new UDServer();
        thread_2.start();
        thread_1.start();
    }//GEN-LAST:event_SimulateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UDPgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UDPgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UDPgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UDPgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UDPgui().setVisible(true);
            }
        });
    }

    private DatagramSocket socket;
    private boolean received = false;
    private byte[] buffer = new byte[256];
    private Random random;
    long startTime;
    long stopTime;
    long waitTime;
    long totalDuration;
    long[] pings;
    int clientSent = 1;
    
  /*  public UserDatagramProtocol(){
        random = new Random();
        Thread thread_2 = new UDClient();
        Thread thread_1 = new UDServer();
        thread_2.start();
        thread_1.start();
    }*/
    
    class UDServer extends Thread{
        @Override
        public void run(){

            try{
                
                    
                // Create a datagram socket, bound to the specific port 2000
                DatagramSocket socket = new DatagramSocket(2000);

                //System.out.println ("Bound to local port " + socket.getLocalPort());
                portLabel.setText("Bound to local port " + socket.getLocalPort());
                while(true){ 
                    // Create a datagram packet, containing a maximum buffer of 256 byte 
                DatagramPacket packet = new DatagramPacket( new byte[256], 256 );

                // Receive a packet - remember by default this is a blocking operation
                
                socket.receive(packet);
                if(random.nextInt(3) != 1){
                    received = true;
                    ServerTextArea.append("Packet received at " + new Date( ) + "\n");
                    //System.out.println ("Packet received at " + new Date( ));
                    // Display packet information
                    InetAddress remote_addr = packet.getAddress();
                    ServerTextArea.append("Sender: " + remote_addr.getHostAddress( ) +"\n");
                    ServerTextArea.append("from Port: " + packet.getPort() + "\n");

                    // Display packet contents, by reading from byte array
                    ByteArrayInputStream bin = new ByteArrayInputStream(packet.getData());

                    // Display only up to the length of the original UDP packet
                    for (int i=0; i < packet.getLength(); i++)  {
                            int data = bin.read();
                            if (data == -1) break;

                            else ServerTextArea.append( (char) data + "");
                            
                    }
                    ServerTextArea.append("\n");
                    try{
                        
                        Thread.sleep(random.nextInt(201));
                    }
                    catch(Exception e){}
                    socket.send(packet);
                }
                else{
                    ServerTextArea.append("Lost packet " + clientSent
                            + ".\n");
                    
                    clientSent++;
                    
                }
                ServerTextArea.append("\n");
            }
            }   
            catch (IOException e) 	{
                    ServerTextArea.append("Error - " + e + "\n\n");
                    
            }
            
        }
    }
    class UDClient extends Thread{
        //use localhost to experiment on a standalone computer
        @Override
        public void run(){
        String hostname="localhost";    String message = "HELLO USING UDP!";
        while(clientSent < 11){
            startTime = System.currentTimeMillis();
            try {
		// Create a datagram socket, look for the first available port
		DatagramSocket socket = new DatagramSocket();

		ClientTextArea.append("Using local port: " + socket.getLocalPort()+"\n");
                ByteArrayOutputStream bOut = new ByteArrayOutputStream();
                PrintStream pOut = new PrintStream(bOut);
                pOut.print(message);
                //convert printstream to byte array
                byte [ ] bArray = bOut.toByteArray();
		// Create a datagram packet, containing a maximum buffer of 256 bytes
		DatagramPacket packet=new DatagramPacket( bArray, bArray.length );

                ClientTextArea.append("Looking for hostname " + hostname+"\n");
                    //get the InetAddress object
                InetAddress remote_addr = InetAddress.getByName(hostname);
                //check its IP number
                ClientTextArea.append("Hostname has IP address = " + remote_addr.getHostAddress() + "\n");
                        //configure the DataGramPacket
                        packet.setAddress(remote_addr);
                        packet.setPort(2000);
                        //send the packet
                        Random random = new Random();
                       //if(random.nextInt(2) == 1){
                            socket.send(packet);
                            //startTime = System.currentTimeMillis();
                       //}
                       //socket.close();
		ClientTextArea.append("Packet sent at! " + new Date() + "\n");

		// Display packet information
		ClientTextArea.append("Sent by  : " + remote_addr.getHostAddress() +"\n");
        		ClientTextArea.append("Send from: " + packet.getPort() +"\n");
                waitTime = System.currentTimeMillis();
                while((System.currentTimeMillis()-waitTime) < 300 && !received){
                }
                if(received){
                    socket.receive(packet);
                    stopTime = System.currentTimeMillis();
                    totalDuration = stopTime - startTime;
                    ClientTextArea.append("Host acknowledged packet " + clientSent + " after " +
                            totalDuration + " ms");
                    received = false;
                    clientSent++;
                    
                }
                ClientTextArea.append("\n\n");
		}
                catch (UnknownHostException ue){
                        ClientTextArea.append("Unknown host "+hostname + "\n\n");
                }
		catch (IOException e){
			ClientTextArea.append("Error - " + e + "\n\n");
		}
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ClientTextArea;
    private javax.swing.JTextArea ServerTextArea;
    private javax.swing.JButton SimulateButton;
    private javax.swing.JLabel instructionsLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel portLabel;
    // End of variables declaration//GEN-END:variables
}
